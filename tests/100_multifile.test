#!/usr/bin/env tclsh

package require tcltest
namespace import tcltest::*

package require fileutil
package require struct::list

set testScript [file normalize [info script]]

#========================================

set THEME multifile

test load "Make sure it is loadable." {
    source [file dirname [file dirname $testScript]]/TclTaskRunner.tcl
} ""

test $THEME-create "create TclTaskRunner instance" {

    set debug [TclTaskRunner::default ::env(DEBUG) 0]
    TclTaskRunner dep -debug $debug -quiet [expr {! $debug}]

} ::dep

test $THEME-load "load *.tcltask" {
    
    foreach fn [glob -directory [file rootname $testScript] *.tcltask] {
        dep load $fn
    }
    
    dict size [dep registry all]
    
} 2

test $THEME-before-build-1 "before build foo" -body {
    
    set result []
    foreach vn {::varA ::varB ::varC} {lappend result $vn [info exists $vn]}
    set result

} -result {::varA 0 ::varB 0 ::varC 0}

test $THEME-build-1 "build foo" -body {
    
    [dep runner] run [dep registry get @foo]

} -output "varA=BBB CCC\n"

test $THEME-after-build-1 "build foo" -body {
    
    set result []
    foreach vn {::varA ::varB ::varC} {lappend result $vn [set $vn]}
    set result

} -result {::varA {BBB CCC} ::varB BBB ::varC CCC}


test $THEME-after-build-1 "foo xxx 3 8" -body {
    
    [[dep registry get @foo] runtime instance] xxx 3 8

} -result 11

test $THEME-after-build-1 "foo target list" -body {
    
    [[dep registry get @foo] runtime instance] target list

} -result {taskA taskB taskC}


test $THEME-before-build-2 "before build bar" -body {
    
    set result []
    foreach vn {::varX ::varY ::varZ} {lappend result $vn [info exists $vn]}
    set result

} -result {::varX 0 ::varY 0 ::varZ 0}

test $THEME-build-2 "build bar" -body {
    
    [dep runner] run [dep registry get @bar]

    set result []
    foreach vn {::varX ::varY ::varZ} {lappend result $vn [set $vn]}
    set result

} -result {::varX {YYY ZZZ} ::varY YYY ::varZ ZZZ}

